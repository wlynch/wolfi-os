package:
  name: emissary
  version: 3.9.1
  epoch: 0
  description: "open source Kubernetes-native API gateway for microservices built on the Envoy Proxy"
  copyright:
    - license: Apache-2.0
  dependencies:
    runtime:
      - datawire-envoy
      - git
      - py3-ambassador

vars:
  py-pkg: ambassador

data:
  - name: py-versions
    items:
      3.10: "310"
      3.11: "311"
      3.12: "312"
      3.13: "300"

environment:
  contents:
    packages:
      - iproute2
      - libcap-utils
      - py3-supported-pip
      - rust

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/emissary-ingress/emissary
      tag: v${{package.version}}
      expected-commit: 6e2ca35c11d124da26df8dd029c33954960b15ae

  # Go binaries
  - uses: go/bump
    with:
      deps: golang.org/x/net@v0.23.0 google.golang.org/protobuf@v1.33.0 k8s.io/kubernetes@v1.28.12 k8s.io/apiserver@v0.28.12
  - uses: go/build
    with:
      packages: ./cmd/apiext
      output: apiext

  - uses: go/build
    with:
      packages: ./cmd/busyambassador
      output: busyambassador

  - uses: go/build
    with:
      packages: ./cmd/capabilities_wrapper
      output: wrapper

  - name: wrapper-setcap
    # See https://github.com/emissary-ingress/emissary/blob/ac2dc64c6621cd8ec5617f3328544364bdd3fb01/build-aux/Dockerfile#L129-L137
    runs: |
      setcap cap_net_bind_service=p ${{targets.contextdir}}/usr/bin/wrapper

  - uses: go/build
    with:
      packages: ./cmd/kubestatus
      output: kubestatus

subpackages:
  - range: py-versions
    name: py${{range.key}}-${{vars.py-pkg}}
    description: python${{range.key}} version of emissary
    dependencies:
      provider-priority: ${{range.value}}
      provides:
        - py3-${{vars.py-pkg}}
    pipeline:
      - name: "Install dependencies"
        runs: |
          # Recommendation is to use the host pip instead of using venv.
          # Pip will complain about being run as root - this disables that warning.
          export PIP_ROOT_USER_ACTION=ignore

          # Install to target dir.
          # Ignore installed packages, since this looks at the builder host packages, when we're trying to install
          # the necessary packages into the target directory.
          python${{range.key}} -m pip install --ignore-installed --prefix=/usr --root=${{targets.contextdir}} -r python/requirements.txt

      - runs: |
          # Generate version file - this static file is read by programs to provide version information in logs.
          # See https://github.com/emissary-ingress/emissary/blob/ac2dc64c6621cd8ec5617f3328544364bdd3fb01/python/ambassador/VERSION.py#L26
          make python/ambassador.version
          cp -p python/ambassador.version ${{targets.contextdir}}/usr/lib/python${{range.key}}/site-packages

          # Install Emissary Python package
          cd python
          python${{range.key}} setup.py install --prefix=/usr --root="${{targets.contextdir}}"

          # Install templates - this is not a python package, so it's not installed by the steps above.
          # This contains a set of HTML templates used by the Python code, but is read relative to the module.
          # See https://github.com/emissary-ingress/emissary/blob/ac2dc64c6621cd8ec5617f3328544364bdd3fb01/python/ambassador_diag/diagd.py#L603
          cp -a templates ${{targets.contextdir}}/usr/lib/python${{range.key}}/site-packages/templates

      - name: "Bump dependencies"
        runs: |
          python${{range.key}} -m pip install --ignore-installed --prefix=/usr --root=${{targets.contextdir}} --upgrade \
            Jinja2==3.1.3 \
            certifi==2024.07.04 \
            gunicorn==22.0.0 \
            idna==3.7 \
            orjson==3.9.15 \
            requests==2.32.0 \
            setuptools==70.0.0 \
            urllib3==1.26.19 \
            Werkzeug==3.0.3

      - uses: strip

    test:
      pipeline:
        - uses: python/import
          with:
            python: python${{range.key}}
            imports: from ambassador import Version

  - name: ${{package.name}}-oci-entrypoint
    description: Entrypoint for ${{package.name}}
    dependencies:
      runtime:
        - emissary
    pipeline:
      - runs: |
          mkdir -p ${{targets.contextdir}}/usr/bin/
          cp -p python/entrypoint.sh ${{targets.contextdir}}/usr/bin/entrypoint.sh
          chmod +x ${{targets.contextdir}}/usr/bin/entrypoint.sh
    test:
      pipeline:
        - runs: stat /usr/bin/entrypoint.sh

update:
  enabled: true
  github:
    identifier: emissary-ingress/emissary
    strip-prefix: v
    use-tag: true
  ignore-regex-patterns:
    - -rc.*
    - -dev.*
    - ^chart/

test:
  environment:
    contents:
      packages:
        - curl
        - emissary
        - emissary-oci-entrypoint
  pipeline:
    - uses: python/import
      with:
        imports: from ambassador import Version
    - uses: test/kwok/cluster
    - name: "Test entrypoint"
      uses: test/daemon-check-output
      with:
        start: /usr/bin/entrypoint.sh
        timeout: "30"
        expected_output: "started command"
        # Can't use default error string set because logs will print error messages complaining it's not running in a pod.
        error_strings: |
          FAIL
          FATAL
        # Need to wait for the server to start up before we can check if it's alive.
        post: |
          sleep 10

          curl -i http://127.0.0.1:8004/ambassador/v0/check_alive
          curl -i http://127.0.0.1:8004/ambassador/v0/check_ready
